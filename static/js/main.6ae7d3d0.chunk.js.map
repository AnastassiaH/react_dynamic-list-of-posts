{"version":3,"sources":["components/PostsList.tsx","utils/fetchClient.ts","utils/formatData.ts","components/Loader/Loader.tsx","components/Comments.tsx","api/client.ts","components/PostDetails.tsx","components/UserSelector.tsx","components/Notification.tsx","utils/constants.ts","components/NewCommentForm.tsx","App.tsx","index.tsx"],"names":["PostsList","_ref","posts","setSelectedPost","selectedPost","setIsNewCommentForm","setIsCommentsError","_jsxs","children","_jsx","className","map","post","id","title","type","classNames","onClick","undefined","onPostOpen","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","arguments","length","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","formatComments","comments","comment","postId","name","email","Loader","Comments","setComments","onDelete","commentId","filter","_ref2","concat","catch","_Fragment","href","PostDetails","newComment","setNewComment","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","isLoading","setIsLoading","useEffect","res","finally","_toConsumableArray","UserSelector","user","setUser","users","setIsPostsLoading","isDropDown","setIsDropDown","prev","role","item","onUserChoose","Notification","isImportant","_ref$title","dataCy","FORM_FIELDS","label","placeholder","icon","NewCommentForm","initialState","formFields","setFormFields","formErrors","setFormErrors","_useState5","_useState6","showError","useCallback","key","_objectSpread","onFieldChange","value","_defineProperty","onSubmit","e","preventDefault","_i","_Object$entries","Object","entries","_Object$entries$_i","toString","validateForm","values","every","field","charAt","toLocaleUpperCase","slice","htmlFor","onChange","target","toUpperCase","App","setUsers","isPostsLoading","_useState7","_useState8","setPosts","_useState9","_useState10","_useState11","_useState12","isNewCommentForm","_useState13","_useState14","_useState15","_useState16","isPostsError","setIsPostsError","_useState17","_useState18","isCommentsError","phone","formatUsers","userId","formatPosts","ReactDOM","render","document","getElementById"],"mappings":"+QAYaA,EAA6B,SAAHC,GAMhC,IALLC,EAAKD,EAALC,MACAC,EAAeF,EAAfE,gBACAC,EAAYH,EAAZG,aACAC,EAAmBJ,EAAnBI,oBACAC,EAAkBL,EAAlBK,mBAUA,OACEC,eAAA,OAAK,UAAQ,YAAWC,SAAA,CACtBC,cAAA,KAAGC,UAAU,QAAOF,SAAC,WAErBD,eAAA,SAAOG,UAAU,uDAAsDF,SAAA,CACrEC,cAAA,SAAAD,SACED,eAAA,MAAIG,UAAU,4BAA2BF,SAAA,CACvCC,cAAA,MAAAD,SAAI,MACJC,cAAA,MAAAD,SAAI,UACJC,cAAA,MAAAD,SAAI,WAIRC,cAAA,SAAAD,SACGN,EAAMS,KAAI,SAAAC,GAAI,OACbL,eAAA,MAAI,UAAQ,OAAMC,SAAA,CAChBC,cAAA,MAAI,UAAQ,SAAQD,SAAEI,EAAKC,KAE3BJ,cAAA,MAAI,UAAQ,YAAWD,SACpBI,EAAKE,QAGRL,cAAA,MAAIC,UAAU,8BAA6BF,SACzCC,cAAA,UACEM,KAAK,SACL,UAAQ,aACRL,UAAWM,IACT,SACA,UACA,CAAE,YAAwB,OAAZZ,QAAY,IAAZA,OAAY,EAAZA,EAAcS,MAAOD,EAAKC,KAE1CI,QAAS,kBAvCN,SAACL,GAClBN,GAAmB,GACnBD,GAAoB,GACpBF,GAAgB,WACd,OAAmB,OAAZC,QAAY,IAAZA,OAAY,EAAZA,EAAcS,MAAOD,EAAKC,QAAKK,EAAYN,KAmCvBO,CAAWP,IAAMJ,UAEnB,OAAZJ,QAAY,IAAZA,OAAY,EAAZA,EAAcS,MAAOD,EAAKC,GAAK,QAAU,aAlBxBD,EAAKC,gB,QC1CnCO,EAAW,oCAGjB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,WAAWD,EAASF,MAOxB,SAASI,EACPC,GAGa,IAFbC,EAAqBC,UAAAC,OAAA,QAAAZ,IAAAW,UAAA,GAAAA,UAAA,GAAG,MACxBE,EAASF,UAAAC,OAAA,QAAAZ,IAAAW,UAAA,GAAAA,UAAA,GAAG,KAENG,EAAuB,CAAEJ,UAW/B,OATIG,IAEFC,EAAQC,KAAOC,KAAKC,UAAUJ,GAC9BC,EAAQI,QAAU,CAChB,eAAgB,oCAKbf,EAAK,KACTgB,MAAK,kBAAMC,MAAMlB,EAAWO,EAAKK,MACjCK,MAAK,SAAAE,GAAQ,OAAIA,EAASC,UAGxB,IAAMC,EACN,SAAId,GAAW,OAAKD,EAAWC,IADzBc,EAEL,SAAId,EAAaI,GAAS,OAAKL,EAAWC,EAAK,OAAQI,IAFlDU,EAIH,SAACd,GAAW,OAAKD,EAAQC,EAAK,WCZ3Be,EAAiB,SAACC,GAC7B,OAAOA,EAAShC,KAAI,SAAAiC,GAAO,MAAK,CAC9B/B,GAAI+B,EAAQ/B,GACZgC,OAAQD,EAAQC,OAChBC,KAAMF,EAAQE,KACdC,MAAOH,EAAQG,MACfd,KAAMW,EAAQX,UC7BLe,G,MAAS,WAAH,OACjBvC,cAAA,OAAKC,UAAU,SAAS,UAAQ,SAAQF,SACtCC,cAAA,OAAKC,UAAU,wBCMNuC,EAA4B,SAAHhD,GAI/B,IAHL0C,EAAQ1C,EAAR0C,SACAO,EAAWjD,EAAXiD,YACA5C,EAAkBL,EAAlBK,mBAEM6C,EAAW,SAACC,GCGS,IAACvC,EDF1BqC,EAAYP,EAASU,QAAO,SAAAC,GAAK,OAAAA,EAAFzC,KAAgBuC,OCErBvC,EDDZuC,ECETX,EAAc,aAADc,OAAc1C,KDD7B2C,OAAM,WACLlD,GAAmB,OAIzB,OACEC,eAAAkD,WAAA,CAAAjD,SAAA,CACEC,cAAA,KAAGC,UAAU,aAAYF,SAAC,cACzBmC,EAAShC,KAAI,SAACiC,GAAO,OACpBrC,eAAA,WACEG,UAAU,mBACV,UAAQ,UAASF,SAAA,CAGjBD,eAAA,OAAKG,UAAU,iBAAgBF,SAAA,CAC7BC,cAAA,KAAGiD,KAAI,UAAAH,OAAYX,EAAQG,OAAS,UAAQ,gBAAevC,SACxDoC,EAAQE,OAEXrC,cAAA,UACE,UAAQ,gBACRM,KAAK,SACLL,UAAU,kBACV,aAAW,SACXO,QAAS,kBAAMkC,EAASP,EAAQ/B,KAAIL,SACrC,qBAKHC,cAAA,OAAKC,UAAU,eAAe,UAAQ,cAAaF,SAChDoC,EAAQX,SAlBNW,EAAQ/B,WEbV8C,EAA+B,SAAH1D,GAMlC,IALLG,EAAYH,EAAZG,aACAC,EAAmBJ,EAAnBI,oBACAuD,EAAU3D,EAAV2D,WACAC,EAAa5D,EAAb4D,cACAvD,EAAkBL,EAAlBK,mBAEQO,EAAoBT,EAApBS,GAAIC,EAAgBV,EAAhBU,MAAOmB,EAAS7B,EAAT6B,KACnB6B,EAAgCC,qBAAqBC,EAAAC,YAAAH,EAAA,GAA9CnB,EAAQqB,EAAA,GAAEd,EAAWc,EAAA,GAC5BE,EAAkCH,oBAAS,GAAKI,EAAAF,YAAAC,EAAA,GAAzCE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GA0B9B,OAxBAG,qBAAU,WDlBmB,IAACzB,ECmBxBzC,IACF8C,OAAYhC,GACZmD,GAAa,IDrBaxB,ECsBVzC,EAAaS,GDrB1B4B,EAAW,oBAADc,OAAqBV,KCsB/BR,MAAK,SAACkC,GACLrB,EAAYR,EAAe6B,OAE5Bf,OAAM,WACLlD,GAAmB,MAEpBkE,SAAQ,WACPH,GAAa,kBAAM,WAGxB,CAACjE,IAEJkE,qBAAU,WACJV,IACFV,EAAYP,EAAQ,GAAAY,OAAAkB,YAAO9B,GAAQ,CAAEiB,IAAc,CAACA,IACpDC,EAAc,SAEf,CAACD,IAGFnD,cAAA,OAAKC,UAAU,UAAU,UAAQ,cAAaF,SAC5CD,eAAA,OAAKG,UAAU,UAAU,UAAQ,cAAaF,SAAA,CAC5CD,eAAA,OAAKG,UAAU,QAAOF,SAAA,CACpBC,cAAA,MAAI,UAAQ,YAAWD,SAAA,IAAA+C,OAChB1C,EAAE,KAAA0C,OAAIzC,KAGbL,cAAA,KAAG,UAAQ,WAAUD,SAClByB,OAIL1B,eAAA,OAAKG,UAAU,QAAOF,SAAA,CACnB4D,GAAa3D,cAACuC,EAAM,KAClBoB,GAAazB,GACdpC,eAAAkD,WAAA,CAAAjD,SAAA,CACImC,EAASb,OAMPrB,cAACwC,EAAQ,CACPN,SAAUA,EACVO,YAAaA,EACb5C,mBAAoBA,IAPtBG,cAAA,KAAGC,UAAU,aAAa,UAAQ,oBAAmBF,SAAC,oBAU1DC,cAAA,UACE,UAAQ,qBACRM,KAAK,SACLL,UAAU,iBACVO,QAAS,kBAAMZ,GAAoB,IAAMG,SAC1C,gCC5EFkE,EAAgC,SAAHzE,GAEnC,IADL0E,EAAI1E,EAAJ0E,KAAMC,EAAO3E,EAAP2E,QAASC,EAAK5E,EAAL4E,MAAOC,EAAiB7E,EAAjB6E,kBAEtBhB,EAAoCC,oBAAS,GAAMC,EAAAC,YAAAH,EAAA,GAA5CiB,EAAUf,EAAA,GAAEgB,EAAahB,EAAA,GAQhC,OACEzD,eAAA,OACE,UAAQ,eACRG,UAAU,qBAAoBF,SAAA,CAE9BC,cAAA,OAAKC,UAAU,mBAAkBF,SAC/BD,eAAA,UACEQ,KAAK,SACLL,UAAU,SACV,gBAAc,OACd,gBAAc,gBACdO,QAAS,kBAAM+D,GAAc,SAAAC,GAAI,OAAKA,MAAMzE,SAAA,CAE5CC,cAAA,QAAAD,UACO,OAAJmE,QAAI,IAAJA,OAAI,EAAJA,EAAM7B,OAAQ,kBAGjBrC,cAAA,QAAMC,UAAU,gBAAeF,SAC7BC,cAAA,KAAGC,UAAU,oBAAoB,cAAY,gBAKlDqE,GACCtE,cAAA,OAAKC,UAAU,gBAAgBG,GAAG,gBAAgBqE,KAAK,OAAM1E,SAC3DC,cAAA,OAAKC,UAAU,mBAAkBF,SAC9BqE,EAAMlE,KAAI,SAACwE,GAAI,OACd1E,cAAA,KAEEiD,KAAK,UACLhD,UAAU,gBACVO,QAAS,kBArCF,SAACkE,GACpBL,GAAkB,GAClBF,EAAQO,GACRH,GAAc,GAkCaI,CAAaD,IAAM3E,SAEjC2E,EAAKrC,MALDqC,EAAKtE,eCxCbwE,EAAgC,SAAHpF,GAInC,IAHLqF,EAAWrF,EAAXqF,YAAWC,EAAAtF,EACXa,aAAK,IAAAyE,EAAG,uBAAsBA,EAC9BC,EAAMvF,EAANuF,OAEA,OACE/E,cAAA,OACEC,UAAWM,IAAW,eACpB,CAAE,YAAasE,EAAa,cAAeA,IAC7C,UAASE,EAAOhF,SAEfM,K,cClBM2E,EAA2B,CACtC,CACE3C,KAAM,OACN4C,MAAO,cACP7E,GAAI,sBACJ8E,YAAa,eACbC,KAAM,WAER,CACE9C,KAAM,QACN4C,MAAO,eACP7E,GAAI,uBACJ8E,YAAa,iBACbC,KAAM,eAER,CACE9C,KAAM,OACN4C,MAAO,eACP7E,GAAI,eACJ8E,YAAa,oBACbC,KAAM,KCPGC,EAAkC,SAAH5F,GAIrC,IAHLG,EAAYH,EAAZG,aACAyD,EAAa5D,EAAb4D,cACAvD,EAAkBL,EAAlBK,mBAEMwF,EACQ,CACVhD,KAAM,GACNC,MAAO,GACPd,KAAM,IAJJ6D,EAMQ,CACVhD,MAAM,EACNC,OAAO,EACPd,MAAM,GAIV6B,EAAoCC,mBAAS+B,GAAwB9B,EAAAC,YAAAH,EAAA,GAA9DiC,EAAU/B,EAAA,GAAEgC,EAAahC,EAAA,GAChCE,EAAoCH,mBAAS+B,GAAwB3B,EAAAF,YAAAC,EAAA,GAA9D+B,EAAU9B,EAAA,GAAE+B,EAAa/B,EAAA,GAChCgC,EAAkCpC,oBAAS,GAAMqC,EAAAnC,YAAAkC,EAAA,GAA1C/B,EAASgC,EAAA,GAAE/B,EAAY+B,EAAA,GAExBC,EAAYC,uBAAY,SAACC,GAC7BN,EAAWM,IAAO,EAClBL,GAAc,SAAAjB,GAAI,OAAAuB,wBAAA,GAAUvB,GAASgB,QACpC,IAUGQ,EAAgB,SAAHnD,GAEb,IADFoD,EAAKpD,EAALoD,MAAO5D,EAAIQ,EAAJR,KAEToD,GAAc,SAAAjB,GAAI,OAAAuB,wBAAA,GAAUvB,GAAI,GAAA0B,YAAA,GAAG7D,GAAO,OAC1CkD,GAAc,SAAAf,GAAI,OAAAuB,wBAAA,GAAUvB,GAAI,GAAA0B,YAAA,GAAG7D,EAAO4D,QAwB5C,OACEnG,eAAA,QACE,UAAQ,iBACRqG,SAxBiB,SAACC,GL3CG,IAAC9E,EK4CxB8E,EAAEC,iBAhBiB,WACnB,QAAAC,EAAA,EAAAC,EAA2BC,OAAOC,QAAQnB,GAAWgB,EAAAC,EAAAlF,OAAAiF,IAAE,CAAlD,IAAAI,EAAAlD,YAAA+C,EAAAD,GAAA,GAAOR,EAAGY,EAAA,GAAOA,EAAA,GACTrF,QACTuE,EAAUE,EAAIa,aAclBC,GACA/G,GAAmB,GACf2G,OAAOK,OAAOrB,GAAYsB,OAAM,SAAApC,GAAI,OAAKA,OAC3Cd,GAAa,ILhDStC,EKiDXyE,YAAC,CAAE3D,OAAQzC,EAAaS,IAAOkF,GLhDvCtD,EAAY,YAAaV,IKiDzBM,MAAK,SAACkC,GACLyB,GAAc,SAAAf,GAAI,OAAAuB,wBAAA,GAAUvB,GAAI,IAAEhD,KAAM,QACxC4B,EAAcnB,EAAe,CAAC6B,IAAyB,OAExDf,OAAM,WACLlD,GAAmB,GACnB4F,EAAcJ,MAEftB,SAAQ,WACPH,GAAa,QAQM7D,SAAA,CAEtBiF,EAAY9E,KAAI,SAAC6G,GAAK,OACrBjH,eAAA,OAEEG,UAAU,QACV,aAAA6C,OAAYiE,EAAM1E,KAAK2E,OAAO,GAAGC,oBAAsBF,EAAM1E,KAAK6E,MAAM,GAAE,SAAQnH,SAAA,CAElFC,cAAA,SAAOC,UAAU,QAAQkH,QAASJ,EAAM3G,GAAGL,SACxCgH,EAAM9B,QAGTnF,eAAA,OAAKG,UAAU,yCAAwCF,SAAA,CACrC,SAAfgH,EAAM1E,KACLrC,cAAA,SACEM,KAAK,OACL+B,KAAM0E,EAAM1E,KACZjC,GAAI2G,EAAM3G,GACV8E,YAAa6B,EAAM7B,YACnBjF,UAAS,QAAA6C,OAAU0C,EAAWuB,EAAM1E,MAAQ,aAAe,IAC3D4D,MAAOX,EAAWyB,EAAM1E,MACxB+E,SAAU,SAAChB,GAAC,OAAKJ,EAAcI,EAAEiB,WAIjCrH,cAAA,YACEqC,KAAM0E,EAAM1E,KACZjC,GAAI2G,EAAM3G,GACV8E,YAAa6B,EAAM7B,YACnBjF,UAAS,WAAA6C,OAAa0C,EAAWuB,EAAM1E,MAAQ,aAAe,IAC9D4D,MAAOX,EAAWyB,EAAM1E,MACxB+E,SAAU,SAAChB,GAAC,OAAKJ,EAAcI,EAAEiB,WAIvCrH,cAAA,QAAMC,UAAU,wBAAuBF,SACrCC,cAAA,KAAGC,UAAS,OAAA6C,OAASiE,EAAM5B,UAG5BK,EAAWuB,EAAM1E,OAChBrC,cAAA,QACEC,UAAU,yCACV,UAAQ,YAAWF,SAEnBC,cAAA,KAAGC,UAAU,qCAKlBuF,EAAWuB,EAAM1E,OAChBrC,cAAA,KAAGC,UAAU,iBAAiB,UAAQ,eAAcF,SAAA,GAAA+C,OAC9CiE,EAAM1E,KAAK2E,OAAO,GAAGM,cAAgBP,EAAM1E,KAAK6E,MAAM,GAAE,oBA/C3DH,EAAM1E,SAqDfvC,eAAA,OAAKG,UAAU,mBAAkBF,SAAA,CAC/BC,cAAA,OAAKC,UAAU,UAASF,SACtBC,cAAA,UACEM,KAAK,SACLL,UAAS,iBAAA6C,OAAmBa,EAAY,cAAgB,IAAK5D,SAC9D,UAKHC,cAAA,OAAKC,UAAU,UAASF,SAEtBC,cAAA,UACEM,KAAK,QACLL,UAAU,0BACVO,QAAS,WACPiF,EAAcJ,GACdE,EAAcF,IACdtF,SACH,mBCzIEwH,EAAgB,WAC3B,IAAAlE,EAA0BC,mBAAiB,IAAGC,EAAAC,YAAAH,EAAA,GAAvCe,EAAKb,EAAA,GAAEiE,EAAQjE,EAAA,GACtBE,EAAwBH,qBAAgBI,EAAAF,YAAAC,EAAA,GAAjCS,EAAIR,EAAA,GAAES,EAAOT,EAAA,GACpBgC,EAA4CpC,oBAAS,GAAMqC,EAAAnC,YAAAkC,EAAA,GAApD+B,EAAc9B,EAAA,GAAEtB,EAAiBsB,EAAA,GACxC+B,EAA0BpE,qBAAkBqE,EAAAnE,YAAAkE,EAAA,GAArCjI,EAAKkI,EAAA,GAAEC,EAAQD,EAAA,GACtBE,EAAwCvE,qBAAgBwE,EAAAtE,YAAAqE,EAAA,GAAjDlI,EAAYmI,EAAA,GAAEpI,EAAeoI,EAAA,GACpCC,EAAgDzE,oBAAS,GAAM0E,EAAAxE,YAAAuE,EAAA,GAAxDE,EAAgBD,EAAA,GAAEpI,EAAmBoI,EAAA,GAC5CE,EAAoC5E,mBAAyB,MAAK6E,EAAA3E,YAAA0E,EAAA,GAA3D/E,EAAUgF,EAAA,GAAE/E,EAAa+E,EAAA,GAChCC,EAAwC9E,oBAAS,GAAM+E,EAAA7E,YAAA4E,EAAA,GAAhDE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GACpCG,EAA8ClF,oBAAS,GAAMmF,EAAAjF,YAAAgF,EAAA,GAAtDE,EAAeD,EAAA,GAAE5I,EAAkB4I,EAAA,GAwB1C,OAtBA5E,qBAAU,WN5BH7B,EAAW,UM8BbJ,MAAK,SAACkC,GACL0D,ET3BmB,SAACpD,GAC1B,OAAOA,EAAMlE,KAAI,SAAAgE,GAAI,MAAK,CACxB9D,GAAI8D,EAAK9D,GACTiC,KAAM6B,EAAK7B,KACXC,MAAO4B,EAAK5B,MACZqG,MAAOzE,EAAKyE,USsBCC,CAAY9E,SAExB,IAEHD,qBAAU,WNhCgB,IAACgF,EMiCrB3E,INjCqB2E,EMkCV3E,EAAK9D,GNjCf4B,EAAW,iBAADc,OAAkB+F,KMkC5BjH,MAAK,SAACkC,GACL8D,ET1BiB,SAACnI,GAC1B,OAAOA,EAAMS,KAAI,SAAAC,GAAI,MAAK,CACxBC,GAAID,EAAKC,GACTyI,OAAQ1I,EAAK0I,OACbxI,MAAOF,EAAKE,MACZmB,KAAMrB,EAAKqB,SSqBIsH,CAAYhF,OAEtBf,OAAM,WACLwF,GAAgB,MAEjBxE,SAAQ,WACPM,GAAkB,kBAAM,UAG7B,CAACH,IAGFlE,cAAA,QAAMC,UAAU,UAASF,SACvBC,cAAA,OAAKC,UAAU,YAAWF,SACxBD,eAAA,OAAKG,UAAU,mBAAkBF,SAAA,CAC/BC,cAAA,OAAKC,UAAU,iBAAgBF,SAC7BD,eAAA,OAAKG,UAAU,+BAA8BF,SAAA,CAC3CC,cAAA,OAAKC,UAAU,QAAOF,SACpBC,cAACiE,EAAY,CACXC,KAAMA,EACNC,QAASA,EACTC,MAAOA,EACPC,kBAAmBA,MAIvBvE,eAAA,OAAKG,UAAU,QAAQ,UAAQ,cAAaF,SAAA,CACzC0H,GAAkBzH,cAACuC,EAAM,KACxB2B,GACAlE,cAAA,KAAG,UAAQ,iBAAgBD,SAAC,sBAI5B0H,GAAkBvD,GAClBlE,cAAAgD,WAAA,CAAAjD,SACGN,EACCO,cAACT,EAAS,CACRE,MAAOA,EACPE,aAAcA,EACdD,gBAAiBA,EACjBE,oBAAqBA,EACrBC,mBAAoBA,IAGtBG,cAAC4E,EAAY,CACXvE,MAAM,eACN0E,OAAO,aACPF,aAAa,cAQ1BlF,GACCK,cAAA,OACE,UAAQ,UACRC,UAAWM,IACT,OACA,YACA,eACA,UACA,CAAE,gBAAiBZ,IACnBI,SAEFD,eAAA,OAAKG,UAAU,gCAA+BF,SAAA,CAC5CC,cAACkD,EAAW,CACVvD,aAAcA,EACdC,oBAAqBA,EACrBuD,WAAYA,EACZC,cAAeA,EACfvD,mBAAoBA,IAErBoI,GACCjI,cAACoF,EAAc,CACbzF,aAAcA,EACdyD,cAAeA,EACfvD,mBAAoBA,KAGtByI,GAAgBI,IAChB1I,cAAC4E,EAAY,CACXC,aAAW,EACXE,OACEuD,EAAe,oBAAsB,gBAEvCjI,MAAM,sCC7H1B0I,IAASC,OACPhJ,cAACuH,EAAG,IACJ0B,SAASC,eAAe,W","file":"static/js/main.6ae7d3d0.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[]\n  selectedPost: Post | undefined,\n  setSelectedPost: (cb: () => Post | undefined) => void,\n  setIsNewCommentForm: (value: boolean) => void,\n  setIsCommentsError: (value: boolean) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  setSelectedPost,\n  selectedPost,\n  setIsNewCommentForm,\n  setIsCommentsError,\n}) => {\n  const onPostOpen = (post: Post) => {\n    setIsCommentsError(false);\n    setIsNewCommentForm(false);\n    setSelectedPost(() => {\n      return selectedPost?.id === post.id ? undefined : post;\n    });\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames(\n                    'button',\n                    'is-link',\n                    { 'is-light': selectedPost?.id !== post.id },\n                  )}\n                  onClick={() => onPostOpen(post)}\n                >\n                  {selectedPost?.id === post.id ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Comment } from '../types/Comment';\nimport { CommentResponse } from '../types/CommentResponse';\nimport { Post } from '../types/Post';\nimport { PostResponse } from '../types/PostResponse';\nimport { User } from '../types/User';\nimport { UserResponse } from '../types/UserResponse';\n\nexport const formatUsers = (users: UserResponse[]): User[] => {\n  return users.map(user => ({\n    id: user.id,\n    name: user.name,\n    email: user.email,\n    phone: user.phone,\n  }));\n};\n\nexport const formatPosts = (posts: PostResponse[]): Post[] => {\n  return posts.map(post => ({\n    id: post.id,\n    userId: post.userId,\n    title: post.title,\n    body: post.body,\n  }));\n};\n\nexport const formatComments = (comments: CommentResponse[]): Comment[] => {\n  return comments.map(comment => ({\n    id: comment.id,\n    postId: comment.postId,\n    name: comment.name,\n    email: comment.email,\n    body: comment.body,\n  }));\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport { Comment } from '../types/Comment';\nimport { deleteComment } from '../api/client';\n\ntype Props = {\n  comments: Comment[],\n  setComments: (comments: Comment[]) => void,\n  setIsCommentsError: (value: boolean) => void,\n};\n\nexport const Comments: React.FC<Props> = ({\n  comments,\n  setComments,\n  setIsCommentsError,\n}) => {\n  const onDelete = (commentId: number) => {\n    setComments(comments.filter(({ id }) => id !== commentId));\n    deleteComment(commentId)\n      .catch(() => {\n        setIsCommentsError(true);\n      });\n  };\n\n  return (\n    <>\n      <p className=\"title is-4\">Comments:</p>\n      {comments.map((comment) => (\n        <article\n          className=\"message is-small\"\n          data-cy=\"Comment\"\n          key={comment.id}\n        >\n          <div className=\"message-header\">\n            <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n              {comment.name}\n            </a>\n            <button\n              data-cy=\"CommentDelete\"\n              type=\"button\"\n              className=\"delete is-small\"\n              aria-label=\"delete\"\n              onClick={() => onDelete(comment.id)}\n            >\n              delete button\n            </button>\n          </div>\n\n          <div className=\"message-body\" data-cy=\"CommentBody\">\n            {comment.body}\n          </div>\n        </article>\n      ))}\n    </>\n  );\n};\n","import { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get('/users');\n};\n\nexport const getUserPosts = (userId: number) => {\n  return client.get(`/posts?userId=${userId}`);\n};\n\nexport const getPostComments = (postId: number) => {\n  return client.get(`/comments?postId=${postId}`);\n};\n\nexport const postComment = (data: {}) => {\n  return client.post('/comments', data);\n};\n\nexport const deleteComment = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n","import React, { useState, useEffect } from 'react';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { getPostComments } from '../api/client';\nimport { formatComments } from '../utils/formatData';\nimport { CommentResponse } from '../types/CommentResponse';\nimport { Loader } from './Loader';\nimport { Comments } from './Comments';\n\ntype Props = {\n  selectedPost: Post,\n  setIsNewCommentForm: (value: boolean) => void,\n  newComment: Comment | null,\n  setNewComment: (value: null) => void,\n  setIsCommentsError: (value: boolean) => void,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n  setIsNewCommentForm,\n  newComment,\n  setNewComment,\n  setIsCommentsError,\n}) => {\n  const { id, title, body } = selectedPost;\n  const [comments, setComments] = useState<Comment[]>();\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    if (selectedPost) {\n      setComments(undefined);\n      setIsLoading(true);\n      getPostComments(selectedPost.id)\n        .then((res) => {\n          setComments(formatComments(res as CommentResponse[]));\n        })\n        .catch(() => {\n          setIsCommentsError(true);\n        })\n        .finally(() => {\n          setIsLoading(() => false);\n        });\n    }\n  }, [selectedPost]);\n\n  useEffect(() => {\n    if (newComment) {\n      setComments(comments ? [...comments, newComment] : [newComment]);\n      setNewComment(null);\n    }\n  }, [newComment]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${id} ${title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && <Loader />}\n          {(!isLoading && comments) && (\n            <>\n              {!comments.length\n                ? (\n                  <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                    No comments yet\n                  </p>\n                ) : (\n                  <Comments\n                    comments={comments}\n                    setComments={setComments}\n                    setIsCommentsError={setIsCommentsError}\n                  />\n                )}\n              <button\n                data-cy=\"WriteCommentButton\"\n                type=\"button\"\n                className=\"button is-link\"\n                onClick={() => setIsNewCommentForm(true)}\n              >\n                Write a comment\n              </button>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { User } from '../types/User';\n\ntype Props = {\n  user: User | undefined,\n  setUser: (user: User) => void,\n  users: User[],\n  setIsPostsLoading: (isLoading: boolean)=> void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  user, setUser, users, setIsPostsLoading,\n}) => {\n  const [isDropDown, setIsDropDown] = useState(false);\n\n  const onUserChoose = (item: User) => {\n    setIsPostsLoading(true);\n    setUser(item);\n    setIsDropDown(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsDropDown(prev => !prev)}\n        >\n          <span>\n            {user?.name || 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isDropDown && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map((item) => (\n              <a\n                key={item.id}\n                href=\"#user-1\"\n                className=\"dropdown-item\"\n                onClick={() => onUserChoose(item)}\n              >\n                {item.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React from 'react';\n\ntype Props = {\n  isImportant: boolean,\n  title?: string,\n  dataCy: string,\n};\n\nexport const Notification: React.FC<Props> = ({\n  isImportant,\n  title = 'Something went wrong',\n  dataCy,\n}) => {\n  return (\n    <div\n      className={classNames('notification',\n        { 'is-danger': isImportant, 'is-warning': !isImportant })}\n      data-cy={dataCy}\n    >\n      {title}\n    </div>\n  );\n};\n","import { FormField } from '../types/FormField';\n\nexport const FORM_FIELDS: FormField[] = [\n  {\n    name: 'name',\n    label: 'Author Name',\n    id: 'comment-author-name',\n    placeholder: 'Name Surname',\n    icon: 'fa-user',\n  },\n  {\n    name: 'email',\n    label: 'Author Email',\n    id: 'comment-author-email',\n    placeholder: 'email@test.com',\n    icon: 'fa-envelope',\n  },\n  {\n    name: 'body',\n    label: 'Comment Text',\n    id: 'comment-body',\n    placeholder: 'Type comment here',\n    icon: '',\n  }];\n","import React, { useState, useCallback } from 'react';\nimport { FORM_FIELDS } from '../utils/constants';\nimport { FormFieldsNames } from '../types/FormField';\nimport { postComment } from '../api/client';\nimport { Post } from '../types/Post';\nimport { formatComments } from '../utils/formatData';\nimport { Comment } from '../types/Comment';\nimport { CommentResponse } from '../types/CommentResponse';\n\ntype Props = {\n  selectedPost: Post,\n  setNewComment: (comment: Comment) => void,\n  setIsCommentsError: (value: boolean) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPost,\n  setNewComment,\n  setIsCommentsError,\n}) => {\n  const initialState = {\n    formFields: {\n      name: '',\n      email: '',\n      body: '',\n    },\n    formErrors: {\n      name: false,\n      email: false,\n      body: false,\n    },\n  };\n\n  const [formFields, setFormFields] = useState(initialState.formFields);\n  const [formErrors, setFormErrors] = useState(initialState.formErrors);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const showError = useCallback((key: FormFieldsNames) => {\n    formErrors[key] = true;\n    setFormErrors(prev => ({ ...prev, ...formErrors }));\n  }, []);\n\n  const validateForm = () => {\n    for (const [key, value] of Object.entries(formFields)) {\n      if (!value.length) {\n        showError(key.toString() as FormFieldsNames);\n      }\n    }\n  };\n\n  const onFieldChange = (\n    { value, name }: EventTarget & HTMLInputElement | HTMLTextAreaElement,\n  ) => {\n    setFormErrors(prev => ({ ...prev, [name]: false }));\n    setFormFields(prev => ({ ...prev, [name]: value }));\n  };\n\n  const onFormSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    validateForm();\n    setIsCommentsError(false);\n    if (Object.values(formErrors).every(item => !item)) {\n      setIsLoading(true);\n      postComment({ postId: selectedPost.id, ...formFields })\n        .then((res) => {\n          setFormFields(prev => ({ ...prev, body: '' }));\n          setNewComment(formatComments([res as CommentResponse])[0]);\n        })\n        .catch(() => {\n          setIsCommentsError(true);\n          setFormErrors(initialState.formErrors);\n        })\n        .finally(() => {\n          setIsLoading(false);\n        });\n    }\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={onFormSubmit}\n    >\n      {FORM_FIELDS.map((field) => (\n        <div\n          key={field.name}\n          className=\"field\"\n          data-cy={`${field.name.charAt(0).toLocaleUpperCase() + field.name.slice(1)}Field`}\n        >\n          <label className=\"label\" htmlFor={field.id}>\n            {field.label}\n          </label>\n\n          <div className=\"control has-icons-left has-icons-right\">\n            {field.name !== 'body' ? (\n              <input\n                type=\"text\"\n                name={field.name}\n                id={field.id}\n                placeholder={field.placeholder}\n                className={`input${formErrors[field.name] ? ' is-danger' : ''}`}\n                value={formFields[field.name]}\n                onChange={(e) => onFieldChange(e.target)}\n              />\n            )\n              : (\n                <textarea\n                  name={field.name}\n                  id={field.id}\n                  placeholder={field.placeholder}\n                  className={`textarea${formErrors[field.name] ? ' is-danger' : ''}`}\n                  value={formFields[field.name]}\n                  onChange={(e) => onFieldChange(e.target)}\n                />\n              )}\n\n            <span className=\"icon is-small is-left\">\n              <i className={`fas ${field.icon}`} />\n            </span>\n\n            {formErrors[field.name] && (\n              <span\n                className=\"icon is-small is-right has-text-danger\"\n                data-cy=\"ErrorIcon\"\n              >\n                <i className=\"fas fa-exclamation-triangle\" />\n              </span>\n            )}\n          </div>\n\n          {formErrors[field.name] && (\n            <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n              {`${field.name.charAt(0).toUpperCase() + field.name.slice(1)} is required`}\n            </p>\n          )}\n        </div>\n      ))}\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={`button is-link${isLoading ? ' is-loading' : ''}`}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={() => {\n              setFormErrors(initialState.formErrors);\n              setFormFields(initialState.formFields);\n            }}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { getUserPosts, getUsers } from './api/client';\nimport { formatPosts, formatUsers } from './utils/formatData';\nimport { UserResponse } from './types/UserResponse';\nimport { Notification } from './components/Notification';\nimport { PostResponse } from './types/PostResponse';\nimport { NewCommentForm } from './components/NewCommentForm';\nimport { Comment } from './types/Comment';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [user, setUser] = useState<User>();\n  const [isPostsLoading, setIsPostsLoading] = useState(false);\n  const [posts, setPosts] = useState<Post[]>();\n  const [selectedPost, setSelectedPost] = useState<Post>();\n  const [isNewCommentForm, setIsNewCommentForm] = useState(false);\n  const [newComment, setNewComment] = useState<Comment | null>(null);\n  const [isPostsError, setIsPostsError] = useState(false);\n  const [isCommentsError, setIsCommentsError] = useState(false);\n\n  useEffect(() => {\n    getUsers()\n      .then((res) => {\n        setUsers(formatUsers(res as UserResponse[]));\n      });\n  }, []);\n\n  useEffect(() => {\n    if (user) {\n      getUserPosts(user.id)\n        .then((res) => {\n          setPosts(formatPosts(res as PostResponse[]));\n        })\n        .catch(() => {\n          setIsPostsError(true);\n        })\n        .finally(() => {\n          setIsPostsLoading(() => false);\n        });\n    }\n  }, [user]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  user={user}\n                  setUser={setUser}\n                  users={users}\n                  setIsPostsLoading={setIsPostsLoading}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {isPostsLoading && <Loader />}\n                {!user && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n                {!isPostsLoading && user && (\n                  <>\n                    {posts ? (\n                      <PostsList\n                        posts={posts}\n                        selectedPost={selectedPost}\n                        setSelectedPost={setSelectedPost}\n                        setIsNewCommentForm={setIsNewCommentForm}\n                        setIsCommentsError={setIsCommentsError}\n                      />\n                    ) : (\n                      <Notification\n                        title=\"No posts yet\"\n                        dataCy=\"NoPostsYet\"\n                        isImportant={false}\n                      />\n                    )}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n          {selectedPost && (\n            <div\n              data-cy=\"Sidebar\"\n              className={classNames(\n                'tile',\n                'is-parent',\n                'is-8-desktop',\n                'Sidebar',\n                { 'Sidebar--open': selectedPost },\n              )}\n            >\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  selectedPost={selectedPost}\n                  setIsNewCommentForm={setIsNewCommentForm}\n                  newComment={newComment}\n                  setNewComment={setNewComment}\n                  setIsCommentsError={setIsCommentsError}\n                />\n                {isNewCommentForm && (\n                  <NewCommentForm\n                    selectedPost={selectedPost}\n                    setNewComment={setNewComment}\n                    setIsCommentsError={setIsCommentsError}\n                  />\n                )}\n                {(isPostsError || isCommentsError) && (\n                  <Notification\n                    isImportant\n                    dataCy={\n                      isPostsError ? 'PostsLoadingError' : 'CommentsError'\n                    }\n                    title=\"Something went wrong\"\n                  />\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}